/**
 * @file   test-filter-ddave-rle.cpp
 * @brief  Test code for Dangerous Dave RLE algorithm.
 *
 * Copyright (C) 2010-2015 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "test-filter.hpp"

class test_filter_ddave_rle: public test_filter
{
	public:
		test_filter_ddave_rle()
		{
			this->type = "rle-ddave";
		}

		void addTests()
		{
			this->test_filter::addTests();

			// The following tests are only accurate if this is true
			assert(this->decoded1().length() == 0x212);

			this->content("normal", this->decoded1().length(),
				STRING_WITH_NULLS("\x12\x02\x00\x00") // decompressed size
				+ this->encoded1()
				,
				this->decoded1()
			);

			this->content_decode("trailing",
				STRING_WITH_NULLS("\x12\x02\x00\x00")
				+ this->encoded1()
				+ STRING_WITH_NULLS("\x80\x00")
				,
				this->decoded1()
			);

			// RLE some data ending with repeated bytes
			this->content("repeated_bytes", 2, STRING_WITH_NULLS(
				"\x02\x00\x00\x00"
				"\x81\x45\x45"
			), STRING_WITH_NULLS(
				"\x45\x45"
			));

			// RLE some data starting and ending with many repeated bytes
			this->content("start_end_repeat", 5, STRING_WITH_NULLS(
				"\x05\x00\x00\x00"
				"\x02\x45"
			), STRING_WITH_NULLS(
				"\x45\x45\x45\x45\x45"
			));

			// RLE some data ending with many repeated bytes
			this->content("many_repeat_at_end", 7, STRING_WITH_NULLS(
				"\x07\x00\x00\x00"
				"\x81\x11\x22\x02\x45"
			), STRING_WITH_NULLS(
				"\x11\x22\x45\x45\x45\x45\x45"
			));

			// RLE some data ending with three repeated bytes
			this->content("repeat_exact_at_end", 6, STRING_WITH_NULLS(
				"\x06\x00\x00\x00"
				"\x82\x01\x02\x03\x00\xFF"
			), STRING_WITH_NULLS(
				"\x01\x02\x03\xFF\xFF\xFF"
			));

			// RLE some data with escaped duplicate bytes
			this->content("escape_double00", 12, STRING_WITH_NULLS(
				"\x0C\x00\x00\x00"
				"\x80\x9E\x00\x00\x87\x7C\x02\x00\x00\x7C\x03\x00\x00"
			), STRING_WITH_NULLS(
				"\x9E\x00\x00\x00\x7C\x02\x00\x00\x7C\x03\x00\x00"
			));

			// RLE some data with one full-sized escaped section
			this->content("escape_exact", 128 + 4, STRING_WITH_NULLS(
				"\x84\x00\x00\x00"
				"\x01\x00"
				"\xFF"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			), STRING_WITH_NULLS(
				"\x00\x00\x00\x00"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			));

			// RLE some data with large escaped sections
			this->content("escape_overflow", 128 * 3 + 4, STRING_WITH_NULLS(
				"\x84\x01\x00\x00"
				"\x01\x00"
				"\xFF"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\xFF"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\xFF"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			), STRING_WITH_NULLS(
				"\x00\x00\x00\x00"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			));

			// RLE some data with RLE spanning large escaped sections
			this->content("escape_overflow_shrink", 128 * 3 + 4, STRING_WITH_NULLS(
				"\x84\x01\x00\x00"
				"\x01\x00"
				"\xFE"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01"
				"\x00\x00"
				"\xFF"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\xFD"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			), STRING_WITH_NULLS(
				"\x00\x00\x00\x00"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01"
				"\x00\x00\x00"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			));

			// The following tests only work on buffers <= 4096 bytes
			assert(BUFFER_SIZE <= 4096);

			// RLE repeated data through 4k stream buffer
			std::string c = STRING_WITH_NULLS("\x40\x10\x00\x00");
			for (int i = 0; i < 32; i++) {
				c.append("\x7F\x00", 2);
			}
			this->content("splitbuf_count", 4160,
				c
				,
				std::string(4160, '\x00')
			);

			// RLE escaped data through 4k stream buffer
			c = STRING_WITH_NULLS("\x31\x10\x00\x00");
			for (int i = 0; i < 31; i++) { // 4030x \x00
				c.append("\x7F\x00", 2); // 130x \x00
			}
			c.append("\x2D\x00", 2); // 48x \x00
			c += STRING_WITH_NULLS(
				"\x00\xCB"
				"\xB8"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85"
				"\x00\x87\x83"
				"\x86\x84\x83\x83"
			);
			this->content("splitbuf_escape", 4030 + 48 + 3 + 64,
				c
				,
				std::string(4030 + 48, '\x00')
				+ STRING_WITH_NULLS(
					"\xCB\xCB\xCB"
					"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
					"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
					"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
					"\x82\x80\x80\x81\x82\x83\x84\x85\x85\x87\x87\x87\x86\x84\x83\x83"
				)
			);

			std::string a = STRING_WITH_NULLS(
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
				"\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02"
			);

			// RLE escaped data through 4k stream buffer
			std::string p;
			c = STRING_WITH_NULLS("\x3B\x10\x00\x00");
			for (int i = 0; i < 31; i++) { // 3968 bytes
				c.append("\xFF", 1);
				c.append(a);
				p.append(a);
			}
			c.append("\xF7", 1); // escape following 120 bytes
			c.append(a.substr(0, 120));
			p.append(a.substr(0, 120));

			c += STRING_WITH_NULLS(
				"\x00\xCB"
				"\xB8"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85"
				"\x00\x87\x83"
				"\x86\x84\x83\x83"
			);
			p += STRING_WITH_NULLS(
				"\xCB\xCB\xCB"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85\x87\x87\x87\x86\x84\x83\x83"
			);
			this->content("splitbuf_count2", 3968 + 120 + 3 + 64, c, p);

			// RLE escaped data through 4k stream buffer
			p.clear();
			c = STRING_WITH_NULLS("\x21\x10\x00\x00");
			for (int i = 0; i < 31; i++) { // 3968 bytes
				c.append("\xFF", 1);
				c.append(a);
				p.append(a);
			}
			c.append("\xDD", 1); // escape following 94 bytes
			c.append(a.substr(0, 94));
			p.append(a.substr(0, 94));

			c += STRING_WITH_NULLS(
				"\x00\xCB"
				"\xB8"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85"
				"\x00\x87\x83"
				"\x86\x84\x83\x83"
			);
			p += STRING_WITH_NULLS(
				"\xCB\xCB\xCB"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85\x87\x87\x87\x86\x84\x83\x83"
			);
			this->content("splitbuf_escape2", 3968 + 94 + 3 + 64, c, p);

			// RLE escaped data through 4k stream buffer
			p.clear();
			c = STRING_WITH_NULLS("\x01\x10\x00\x00");
			for (int i = 0; i < 31; i++) { // 3968 bytes
				c.append("\xFF", 1);
				c.append(a);
				p.append(a);
			}
			c.append("\xBD", 1); // escape following 62 bytes
			c.append(a.substr(0, 62));
			p.append(a.substr(0, 62));

			c += STRING_WITH_NULLS(
				"\x00\xCB"
				"\xB8"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85"
				"\x00\x87\x83"
				"\x86\x84\x83\x83"
			);
			p += STRING_WITH_NULLS(
				"\xCB\xCB\xCB"
				"\xD6\xCE\xCE\xCF\xCE\xCE\xD2\xD6\xCC\xCC\x87\x86\x85\x84\x83\x83"
				"\x81\x81\x80\x81\x82\x83\x83\x84\x85\x86\x87\x87\x86\x85\x84\x83"
				"\x81\x81\x80\x80\x82\x82\x83\x85\x86\x87\x87\x86\x85\x85\x84\x83"
				"\x82\x80\x80\x81\x82\x83\x84\x85\x85\x87\x87\x87\x86\x84\x83\x83"
			);
			this->content("splitbuf_escape3", 3968 + 62 + 3 + 64, c, p);
		}

		std::string encoded1()
		{
			return STRING_WITH_NULLS(
				"\x80\xAA\x00\x00\x81\xBB\xCC\x01\xDD"
				"\x7F\x11"
				"\x7E\x12"
				"\xFE"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31"
				"\x03\x44"
				"\xFF"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
			);
		}

		std::string decoded1()
		{
			return STRING_WITH_NULLS(
				"\xAA\x00\x00\x00\xBB\xCC\xDD\xDD\xDD\xDD"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11\x11\x11\x11\x11\x11\x11"
				"\x11\x11"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12\x12\x12\x12\x12\x12\x12\x12"
				"\x12"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31\x32"
				"\x31\x32\x31\x32\x31\x32\x31"
				"\x44\x44\x44\x44\x44\x44"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
				"\x21\x22\x21\x22\x21\x22\x21\x22"
			);
		}
};

IMPLEMENT_TESTS(filter_ddave_rle);
