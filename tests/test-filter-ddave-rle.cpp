/**
 * @file   test-filter-ddave-rle.cpp
 * @brief  Test code for Dangerous Dave RLE algorithm.
 *
 * Copyright (C) 2010-2012 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/copy.hpp>
#include <camoto/util.hpp>

#include "tests.hpp"
#include "test-filter.hpp"
#include "../src/filter-ddave-rle.hpp"

using namespace camoto;
using namespace camoto::gamearchive;

struct ddave_rle_sample: public filter_sample {
	ddave_rle_sample()
	{
		this->filter.reset(new filter_ddave_rle());
	}
};

struct ddave_unrle_sample: public filter_sample {
	ddave_unrle_sample()
	{
		this->filter.reset(new filter_ddave_unrle());
	}
};

#define DATA_ENCODED \
	"\x80\xAA\x00\x00\x81\xBB\xCC\x01\xDD" \
	"\x7F\x11" \
	"\x7E\x12" \
	"\xFE" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31" \
	"\x03\x44" \
	"\xFF" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22"

// Should have no effect on the decoded data when following DATA_ENCODED
#define DATA_BAD_TRAIL "\x00"

#define DATA_DECODED \
	"\xAA\x00\x00\x00\xBB\xCC\xDD\xDD\xDD\xDD" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11\x11\x11\x11\x11\x11\x11" \
	"\x11\x11" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12\x12\x12\x12\x12\x12\x12\x12" \
	"\x12" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31\x32" \
	"\x31\x32\x31\x32\x31\x32\x31" \
	"\x44\x44\x44\x44\x44\x44" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22" \
	"\x21\x22\x21\x22\x21\x22\x21\x22"

BOOST_FIXTURE_TEST_SUITE(ddave_unrle_suite, ddave_unrle_sample)

BOOST_AUTO_TEST_CASE(decode)
{
	BOOST_TEST_MESSAGE("Un-RLE some data");

	in << makeString(DATA_ENCODED);

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_DECODED)),
		"Decoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(decoder_trail)
{
	BOOST_TEST_MESSAGE("Un-RLE some data, with trailing garbage");

	in << makeString(DATA_ENCODED DATA_BAD_TRAIL);

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_DECODED)),
		"Decoding RLE data with trailing incomplete code was not ignored");

	BOOST_CHECK_MESSAGE(this->default_sample::is_equal(makeString(DATA_ENCODED
		DATA_BAD_TRAIL), in->str()),
		"Decoding RLE data corrupted the source data");
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_FIXTURE_TEST_SUITE(ddave_rle_suite, ddave_rle_sample)

BOOST_AUTO_TEST_CASE(encode)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(DATA_DECODED);

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_ENCODED)),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode_repeat)
{
	BOOST_TEST_MESSAGE("RLE some data ending with repeated bytes");

	in << makeString(DATA_DECODED "\x45\x45");

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_ENCODED "\x81\x45\x45")),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode_repeat_many)
{
	BOOST_TEST_MESSAGE("RLE some data ending with many repeated bytes");

	in << makeString(DATA_DECODED "\x45\x45\x45\x45\x45");

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_ENCODED "\x02\x45")),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode_repeat_exact)
{
	BOOST_TEST_MESSAGE("RLE some data ending with three repeated bytes");

	in << makeString(DATA_DECODED "\x00\x00\x00\xFF\xFF\xFF");

	BOOST_CHECK_MESSAGE(is_equal(makeString(DATA_ENCODED "\x00\x00\x00\xFF")),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_SUITE_END()
