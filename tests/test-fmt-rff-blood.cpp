/*
 * test-fmt-rff-blood.cpp - test code for RFFArchive class.
 *
 * Copyright (C) 2010-2013 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#define FILENAME1 "ONE.DAT"
#define FILENAME2 "TWO.DAT"
#define FILENAME3 "THREE.DAT"
#define FILENAME4 "FOUR.DAT"

#define testdata_initialstate \
	"RFF\x1a" "\x00\x02\x00\x00" "\x3e\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_rename \
	"RFF\x1a" "\x00\x02\x00\x00" "\x3e\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTHREE\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_insert_end \
	"RFF\x1a" "\x00\x02\x00\x00" "\x4f\x00\x00\x00" "\x03\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat" \
	"This is two.dat" \
	"This is three.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x3e\x00\x00\x00" "\x11\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTHREE\0\0\0"   "\x00\x00\x00\x00"

#define testdata_insert_mid \
	"RFF\x1a" "\x00\x02\x00\x00" "\x4f\x00\x00\x00" "\x03\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat" \
	"This is three.dat" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x11\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTHREE\0\0\0"   "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x40\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_insert2 \
	"RFF\x1a" "\x00\x02\x00\x00" "\x5f\x00\x00\x00" "\x04\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat" \
	"This is three.dat" \
	"This is four.dat" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x11\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTHREE\0\0\0"   "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x40\x00\x00\x00" "\x10\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATFOUR\0\0\0\0"  "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x50\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_remove \
	"RFF\x1a" "\x00\x02\x00\x00" "\x2f\x00\x00\x00" "\x01\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_remove2 \
	"RFF\x1a" "\x00\x02\x00\x00" "\x20\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"

#define testdata_insert_remove \
	"RFF\x1a" "\x00\x02\x00\x00" "\x40\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is three.dat" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x11\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTHREE\0\0\0"   "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x31\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_move \
	"RFF\x1a" "\x00\x02\x00\x00" "\x3e\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is two.dat" \
	"This is one.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_resize_larger \
	"RFF\x1a" "\x00\x02\x00\x00" "\x43\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is one.dat\0\0\0\0\0" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x14\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x34\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_resize_smaller \
	"RFF\x1a" "\x00\x02\x00\x00" "\x39\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"This is on" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x0a\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x2a\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_resize_write \
	"RFF\x1a" "\x00\x02\x00\x00" "\x46\x00\x00\x00" "\x02\x00\x00\x00" \
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"Now resized to 23 chars" \
	"This is two.dat" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x20\x00\x00\x00" "\x17\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00" \
	\
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x37\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" \
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"

#define testdata_get_metadata_version "2.0" // file format version

#define MAX_FILENAME_LEN  12

#define ARCHIVE_CLASS fmt_rff_blood
#define ARCHIVE_TYPE  "rff-blood"
#include "test-archive.hpp"

// Additional tests just for this format
BOOST_FIXTURE_TEST_SUITE(SUITE_NAME, FIXTURE_NAME)

BOOST_AUTO_TEST_CASE(TEST_NAME(insert_long_base))
{
	BOOST_TEST_MESSAGE("Inserting file with basename too long");

	// Find the file we're going to insert before
	Archive::EntryPtr epb = pArchive->find(FILENAME1);

	// Make sure we found it
	BOOST_REQUIRE_MESSAGE(pArchive->isValid(epb),
		"Couldn't find " FILENAME1 " in sample archive");

	const char *name = "123456789.A";

	BOOST_CHECK_THROW(
		Archive::EntryPtr ep = pArchive->insert(epb, name, 5, FILETYPE_GENERIC,
			EA_NONE),
		stream::error
	);

	BOOST_CHECK_MESSAGE(
		is_equal(makeString(INITIALSTATE_NAME)),
		"Archive corrupted after failed insert"
	);
}

BOOST_AUTO_TEST_CASE(TEST_NAME(insert_long_nodot))
{
	BOOST_TEST_MESSAGE("Inserting file with no dot and name too long");

	// Find the file we're going to insert before
	Archive::EntryPtr epb = pArchive->find(FILENAME1);

	// Make sure we found it
	BOOST_REQUIRE_MESSAGE(pArchive->isValid(epb),
		"Couldn't find " FILENAME1 " in sample archive");

	const char *name = "123456789";

	BOOST_CHECK_THROW(
		Archive::EntryPtr ep = pArchive->insert(epb, name, 5, FILETYPE_GENERIC,
			EA_NONE),
		stream::error
	);

	BOOST_CHECK_MESSAGE(
		is_equal(makeString(INITIALSTATE_NAME)),
		"Archive corrupted after failed insert"
	);
}

BOOST_AUTO_TEST_CASE(TEST_NAME(insert_long_ext))
{
	BOOST_TEST_MESSAGE("Inserting file with extension too long");

	// Find the file we're going to insert before
	Archive::EntryPtr epb = pArchive->find(FILENAME1);

	// Make sure we found it
	BOOST_REQUIRE_MESSAGE(pArchive->isValid(epb),
		"Couldn't find " FILENAME1 " in sample archive");

	const char *name = "12345.ABCD";

	BOOST_CHECK_THROW(
		Archive::EntryPtr ep = pArchive->insert(epb, name, 5, FILETYPE_GENERIC,
			EA_NONE),
		stream::error
	);

	BOOST_CHECK_MESSAGE(
		is_equal(makeString(INITIALSTATE_NAME)),
		"Archive corrupted after failed insert"
	);
}

// TODO: test with 1) <8 char filename, 2) 8 char filename, 3) <3 char file ext

BOOST_AUTO_TEST_SUITE_END()

// Test some invalid formats to make sure they're not identified as valid
// archives.  Note that they can still be opened though (by 'force'), this
// only checks whether they look like valid files or not.

// The "c00" test has already been performed in test-archive.hpp to ensure the
// initial state is correctly identified as a valid archive.

ISINSTANCE_TEST(c01,
	"FFR\x1a" "\x00\x02\x00\x00" "\x3e\x00\x00\x00" "\x02\x00\x00\x00"
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"This is one.dat"
	"This is two.dat"

	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00"

	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00",
	DefinitelyNo
);

ISINSTANCE_TEST(c02,
	"RFF",
	DefinitelyNo
);

// Test some valid formats but with corrupted data, to make sure nothing
// strange happens.  These must be valid files (correct signature, so
// isInstance passes them) but with invalid content.
INVALIDDATA_TEST(c01,
	"RFF\x1a" "\x00\x02\x00\x00" "\x3e\x00\x00\x00" "\x02\x00\x00\xf0"
	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"This is one.dat"
	"This is two.dat"

	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x20\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x00" "DATONE\0\0\0\0\0" "\x00\x00\x00\x00"

	"\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x2f\x00\x00\x00" "\x0f\x00\x00\x00" "\x00\x00\x00\x00" "\x00\x00\x00\x00"
	"\x00" "DATTWO\0\0\0\0\0" "\x00\x00\x00\x00"
);
